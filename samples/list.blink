class List {
    var node: Node = null

    func add(e: Object): List = {
        if (node == null) node = new Node(e) else node.add(e)
        this
    }

    func size(): Int = node.size()

    func get(index: Int): Object = node.get(index)

    func indexOf(e: Object): Int = node.indexOf(e)

    override func toString(): String = node.toString()
}

class Node(data: Object) {
    var next: Node = null

    func data(): Object = data

    func next(): Node = next

    func setNext(n: Node) = next = n

    func add(e: Object): Node = {
        let node = this in {
            while (node.next() != null)
                node = node.next()

            node.setNext(new Node(e))
        }
        this
    }

    func get(index: Int): Object = {
        if (index < 0) null
        else {
            let i = 0, node = this in {
                while (i < index && node != null) {
                    i += 1
                    node = node.next()
                }

                if (node != null) node.data() else null
            }
        }
    }

    func indexOf(e: Object): Int = {
        let index = 0, node = this in {
            while (node != null && node.data() != e) {
                index += 1
                node = node.next()
            }

            if (node == null) -1 else index
        }
    }

    func size(): Int = {
        let size = 0, node = this in {
            while (node != null) {
                size += 1
                node = node.next()
            }

            size
        }
    }

    override func toString(): String = {
        let str = "[", node = this in {
            while (node.next() != null) {
                str += node.data() + ", "
                node = node.next()
            }

            str + node.data() + "]"
        }
    }
}