class Fraction(n: Int, d: Int) {
    var g: Int = gcd(Math.abs(n), Math.abs(d))

    var num: Int = n / g

    var den: Int = d / g

    func num(): Int = num

    func setNum(n: Int) = num = n / gcd(Math.abs(n), Math.abs(den))

    func den(): Int = den

    func setDen(d: Int) = den = d / gcd(Math.abs(num), Math.abs(d))

    func +(that: Fraction): Fraction = new Fraction(
            num * that.den() + den * that.num(),
            den * that.den()
        )

    func +(that: Int): Fraction = this + new Fraction(that, 1)

    func -(that: Fraction): Fraction = new Fraction(
            num * that.den() - den * that.num(),
            den * that.den()
        )

    func -(that: Int): Fraction = this - new Fraction(that, 1)

    func *(that: Fraction): Fraction = new Fraction(num * that.num(), den * that.den())

    func *(that: Int): Fraction = this * new Fraction(that, 1)

    func /(that: Fraction): Fraction = this * new Fraction(that.den(), that.num())

    func /(that: Int): Fraction = this / new Fraction(that, 1)

    override func ==(that: Object): Bool = {
        if (!that.instanceOf("Fraction"))
            false
        else {
            let frac = that as Fraction in {
                num == frac.num() && den == frac.den()
            }
        }
    }

    override func toString(): String = num + if (den > 1) "/" + den else ""

    private func gcd(a: Int, b: Int): Int = if (b == 0) a else gcd(b, a % b)
}